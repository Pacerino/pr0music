// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pacerino/pr0music/ent/comments"
	"github.com/Pacerino/pr0music/ent/items"
)

// CommentsCreate is the builder for creating a Comments entity.
type CommentsCreate struct {
	config
	mutation *CommentsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CommentsCreate) SetCreatedAt(t time.Time) *CommentsCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableCreatedAt(t *time.Time) *CommentsCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CommentsCreate) SetUpdatedAt(t time.Time) *CommentsCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableUpdatedAt(t *time.Time) *CommentsCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetItemID sets the "item_id" field.
func (cc *CommentsCreate) SetItemID(i int) *CommentsCreate {
	cc.mutation.SetItemID(i)
	return cc
}

// SetCommentID sets the "comment_id" field.
func (cc *CommentsCreate) SetCommentID(i int) *CommentsCreate {
	cc.mutation.SetCommentID(i)
	return cc
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableCommentID(i *int) *CommentsCreate {
	if i != nil {
		cc.SetCommentID(*i)
	}
	return cc
}

// SetUp sets the "up" field.
func (cc *CommentsCreate) SetUp(i int) *CommentsCreate {
	cc.mutation.SetUp(i)
	return cc
}

// SetNillableUp sets the "up" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableUp(i *int) *CommentsCreate {
	if i != nil {
		cc.SetUp(*i)
	}
	return cc
}

// SetDown sets the "down" field.
func (cc *CommentsCreate) SetDown(i int) *CommentsCreate {
	cc.mutation.SetDown(i)
	return cc
}

// SetNillableDown sets the "down" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableDown(i *int) *CommentsCreate {
	if i != nil {
		cc.SetDown(*i)
	}
	return cc
}

// SetContent sets the "content" field.
func (cc *CommentsCreate) SetContent(s string) *CommentsCreate {
	cc.mutation.SetContent(s)
	return cc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableContent(s *string) *CommentsCreate {
	if s != nil {
		cc.SetContent(*s)
	}
	return cc
}

// SetCreated sets the "created" field.
func (cc *CommentsCreate) SetCreated(t time.Time) *CommentsCreate {
	cc.mutation.SetCreated(t)
	return cc
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableCreated(t *time.Time) *CommentsCreate {
	if t != nil {
		cc.SetCreated(*t)
	}
	return cc
}

// SetThumb sets the "thumb" field.
func (cc *CommentsCreate) SetThumb(s string) *CommentsCreate {
	cc.mutation.SetThumb(s)
	return cc
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (cc *CommentsCreate) SetNillableThumb(s *string) *CommentsCreate {
	if s != nil {
		cc.SetThumb(*s)
	}
	return cc
}

// SetItemsID sets the "items" edge to the Items entity by ID.
func (cc *CommentsCreate) SetItemsID(id int) *CommentsCreate {
	cc.mutation.SetItemsID(id)
	return cc
}

// SetNillableItemsID sets the "items" edge to the Items entity by ID if the given value is not nil.
func (cc *CommentsCreate) SetNillableItemsID(id *int) *CommentsCreate {
	if id != nil {
		cc = cc.SetItemsID(*id)
	}
	return cc
}

// SetItems sets the "items" edge to the Items entity.
func (cc *CommentsCreate) SetItems(i *Items) *CommentsCreate {
	return cc.SetItemsID(i.ID)
}

// Mutation returns the CommentsMutation object of the builder.
func (cc *CommentsCreate) Mutation() *CommentsMutation {
	return cc.mutation
}

// Save creates the Comments in the database.
func (cc *CommentsCreate) Save(ctx context.Context) (*Comments, error) {
	var (
		err  error
		node *Comments
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Comments)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CommentsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommentsCreate) SaveX(ctx context.Context) *Comments {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CommentsCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CommentsCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CommentsCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := comments.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := comments.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommentsCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Comments.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Comments.updated_at"`)}
	}
	if _, ok := cc.mutation.ItemID(); !ok {
		return &ValidationError{Name: "item_id", err: errors.New(`ent: missing required field "Comments.item_id"`)}
	}
	return nil
}

func (cc *CommentsCreate) sqlSave(ctx context.Context) (*Comments, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CommentsCreate) createSpec() (*Comments, *sqlgraph.CreateSpec) {
	var (
		_node = &Comments{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comments.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comments.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(comments.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(comments.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.ItemID(); ok {
		_spec.SetField(comments.FieldItemID, field.TypeInt, value)
		_node.ItemID = value
	}
	if value, ok := cc.mutation.CommentID(); ok {
		_spec.SetField(comments.FieldCommentID, field.TypeInt, value)
		_node.CommentID = value
	}
	if value, ok := cc.mutation.Up(); ok {
		_spec.SetField(comments.FieldUp, field.TypeInt, value)
		_node.Up = value
	}
	if value, ok := cc.mutation.Down(); ok {
		_spec.SetField(comments.FieldDown, field.TypeInt, value)
		_node.Down = value
	}
	if value, ok := cc.mutation.Content(); ok {
		_spec.SetField(comments.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := cc.mutation.Created(); ok {
		_spec.SetField(comments.FieldCreated, field.TypeTime, value)
		_node.Created = value
	}
	if value, ok := cc.mutation.Thumb(); ok {
		_spec.SetField(comments.FieldThumb, field.TypeString, value)
		_node.Thumb = value
	}
	if nodes := cc.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.ItemsTable,
			Columns: []string{comments.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: items.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.items_comments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comments.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CommentsCreate) OnConflict(opts ...sql.ConflictOption) *CommentsUpsertOne {
	cc.conflict = opts
	return &CommentsUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comments.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CommentsCreate) OnConflictColumns(columns ...string) *CommentsUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CommentsUpsertOne{
		create: cc,
	}
}

type (
	// CommentsUpsertOne is the builder for "upsert"-ing
	//  one Comments node.
	CommentsUpsertOne struct {
		create *CommentsCreate
	}

	// CommentsUpsert is the "OnConflict" setter.
	CommentsUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentsUpsert) SetUpdatedAt(v time.Time) *CommentsUpsert {
	u.Set(comments.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateUpdatedAt() *CommentsUpsert {
	u.SetExcluded(comments.FieldUpdatedAt)
	return u
}

// SetCommentID sets the "comment_id" field.
func (u *CommentsUpsert) SetCommentID(v int) *CommentsUpsert {
	u.Set(comments.FieldCommentID, v)
	return u
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateCommentID() *CommentsUpsert {
	u.SetExcluded(comments.FieldCommentID)
	return u
}

// AddCommentID adds v to the "comment_id" field.
func (u *CommentsUpsert) AddCommentID(v int) *CommentsUpsert {
	u.Add(comments.FieldCommentID, v)
	return u
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *CommentsUpsert) ClearCommentID() *CommentsUpsert {
	u.SetNull(comments.FieldCommentID)
	return u
}

// SetUp sets the "up" field.
func (u *CommentsUpsert) SetUp(v int) *CommentsUpsert {
	u.Set(comments.FieldUp, v)
	return u
}

// UpdateUp sets the "up" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateUp() *CommentsUpsert {
	u.SetExcluded(comments.FieldUp)
	return u
}

// AddUp adds v to the "up" field.
func (u *CommentsUpsert) AddUp(v int) *CommentsUpsert {
	u.Add(comments.FieldUp, v)
	return u
}

// ClearUp clears the value of the "up" field.
func (u *CommentsUpsert) ClearUp() *CommentsUpsert {
	u.SetNull(comments.FieldUp)
	return u
}

// SetDown sets the "down" field.
func (u *CommentsUpsert) SetDown(v int) *CommentsUpsert {
	u.Set(comments.FieldDown, v)
	return u
}

// UpdateDown sets the "down" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateDown() *CommentsUpsert {
	u.SetExcluded(comments.FieldDown)
	return u
}

// AddDown adds v to the "down" field.
func (u *CommentsUpsert) AddDown(v int) *CommentsUpsert {
	u.Add(comments.FieldDown, v)
	return u
}

// ClearDown clears the value of the "down" field.
func (u *CommentsUpsert) ClearDown() *CommentsUpsert {
	u.SetNull(comments.FieldDown)
	return u
}

// SetContent sets the "content" field.
func (u *CommentsUpsert) SetContent(v string) *CommentsUpsert {
	u.Set(comments.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateContent() *CommentsUpsert {
	u.SetExcluded(comments.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *CommentsUpsert) ClearContent() *CommentsUpsert {
	u.SetNull(comments.FieldContent)
	return u
}

// SetCreated sets the "created" field.
func (u *CommentsUpsert) SetCreated(v time.Time) *CommentsUpsert {
	u.Set(comments.FieldCreated, v)
	return u
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateCreated() *CommentsUpsert {
	u.SetExcluded(comments.FieldCreated)
	return u
}

// ClearCreated clears the value of the "created" field.
func (u *CommentsUpsert) ClearCreated() *CommentsUpsert {
	u.SetNull(comments.FieldCreated)
	return u
}

// SetThumb sets the "thumb" field.
func (u *CommentsUpsert) SetThumb(v string) *CommentsUpsert {
	u.Set(comments.FieldThumb, v)
	return u
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *CommentsUpsert) UpdateThumb() *CommentsUpsert {
	u.SetExcluded(comments.FieldThumb)
	return u
}

// ClearThumb clears the value of the "thumb" field.
func (u *CommentsUpsert) ClearThumb() *CommentsUpsert {
	u.SetNull(comments.FieldThumb)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Comments.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CommentsUpsertOne) UpdateNewValues() *CommentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(comments.FieldCreatedAt)
		}
		if _, exists := u.create.mutation.ItemID(); exists {
			s.SetIgnore(comments.FieldItemID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comments.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CommentsUpsertOne) Ignore() *CommentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentsUpsertOne) DoNothing() *CommentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentsCreate.OnConflict
// documentation for more info.
func (u *CommentsUpsertOne) Update(set func(*CommentsUpsert)) *CommentsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentsUpsertOne) SetUpdatedAt(v time.Time) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateUpdatedAt() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCommentID sets the "comment_id" field.
func (u *CommentsUpsertOne) SetCommentID(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetCommentID(v)
	})
}

// AddCommentID adds v to the "comment_id" field.
func (u *CommentsUpsertOne) AddCommentID(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.AddCommentID(v)
	})
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateCommentID() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateCommentID()
	})
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *CommentsUpsertOne) ClearCommentID() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearCommentID()
	})
}

// SetUp sets the "up" field.
func (u *CommentsUpsertOne) SetUp(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetUp(v)
	})
}

// AddUp adds v to the "up" field.
func (u *CommentsUpsertOne) AddUp(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.AddUp(v)
	})
}

// UpdateUp sets the "up" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateUp() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateUp()
	})
}

// ClearUp clears the value of the "up" field.
func (u *CommentsUpsertOne) ClearUp() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearUp()
	})
}

// SetDown sets the "down" field.
func (u *CommentsUpsertOne) SetDown(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetDown(v)
	})
}

// AddDown adds v to the "down" field.
func (u *CommentsUpsertOne) AddDown(v int) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.AddDown(v)
	})
}

// UpdateDown sets the "down" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateDown() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateDown()
	})
}

// ClearDown clears the value of the "down" field.
func (u *CommentsUpsertOne) ClearDown() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearDown()
	})
}

// SetContent sets the "content" field.
func (u *CommentsUpsertOne) SetContent(v string) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateContent() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentsUpsertOne) ClearContent() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearContent()
	})
}

// SetCreated sets the "created" field.
func (u *CommentsUpsertOne) SetCreated(v time.Time) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateCreated() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *CommentsUpsertOne) ClearCreated() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearCreated()
	})
}

// SetThumb sets the "thumb" field.
func (u *CommentsUpsertOne) SetThumb(v string) *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.SetThumb(v)
	})
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *CommentsUpsertOne) UpdateThumb() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateThumb()
	})
}

// ClearThumb clears the value of the "thumb" field.
func (u *CommentsUpsertOne) ClearThumb() *CommentsUpsertOne {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearThumb()
	})
}

// Exec executes the query.
func (u *CommentsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CommentsUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CommentsUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CommentsCreateBulk is the builder for creating many Comments entities in bulk.
type CommentsCreateBulk struct {
	config
	builders []*CommentsCreate
	conflict []sql.ConflictOption
}

// Save creates the Comments entities in the database.
func (ccb *CommentsCreateBulk) Save(ctx context.Context) ([]*Comments, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comments, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommentsCreateBulk) SaveX(ctx context.Context) []*Comments {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CommentsCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CommentsCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comments.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CommentsUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CommentsCreateBulk) OnConflict(opts ...sql.ConflictOption) *CommentsUpsertBulk {
	ccb.conflict = opts
	return &CommentsUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comments.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CommentsCreateBulk) OnConflictColumns(columns ...string) *CommentsUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CommentsUpsertBulk{
		create: ccb,
	}
}

// CommentsUpsertBulk is the builder for "upsert"-ing
// a bulk of Comments nodes.
type CommentsUpsertBulk struct {
	create *CommentsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comments.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CommentsUpsertBulk) UpdateNewValues() *CommentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(comments.FieldCreatedAt)
			}
			if _, exists := b.mutation.ItemID(); exists {
				s.SetIgnore(comments.FieldItemID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comments.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CommentsUpsertBulk) Ignore() *CommentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CommentsUpsertBulk) DoNothing() *CommentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CommentsCreateBulk.OnConflict
// documentation for more info.
func (u *CommentsUpsertBulk) Update(set func(*CommentsUpsert)) *CommentsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CommentsUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CommentsUpsertBulk) SetUpdatedAt(v time.Time) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateUpdatedAt() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCommentID sets the "comment_id" field.
func (u *CommentsUpsertBulk) SetCommentID(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetCommentID(v)
	})
}

// AddCommentID adds v to the "comment_id" field.
func (u *CommentsUpsertBulk) AddCommentID(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.AddCommentID(v)
	})
}

// UpdateCommentID sets the "comment_id" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateCommentID() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateCommentID()
	})
}

// ClearCommentID clears the value of the "comment_id" field.
func (u *CommentsUpsertBulk) ClearCommentID() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearCommentID()
	})
}

// SetUp sets the "up" field.
func (u *CommentsUpsertBulk) SetUp(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetUp(v)
	})
}

// AddUp adds v to the "up" field.
func (u *CommentsUpsertBulk) AddUp(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.AddUp(v)
	})
}

// UpdateUp sets the "up" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateUp() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateUp()
	})
}

// ClearUp clears the value of the "up" field.
func (u *CommentsUpsertBulk) ClearUp() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearUp()
	})
}

// SetDown sets the "down" field.
func (u *CommentsUpsertBulk) SetDown(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetDown(v)
	})
}

// AddDown adds v to the "down" field.
func (u *CommentsUpsertBulk) AddDown(v int) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.AddDown(v)
	})
}

// UpdateDown sets the "down" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateDown() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateDown()
	})
}

// ClearDown clears the value of the "down" field.
func (u *CommentsUpsertBulk) ClearDown() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearDown()
	})
}

// SetContent sets the "content" field.
func (u *CommentsUpsertBulk) SetContent(v string) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateContent() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *CommentsUpsertBulk) ClearContent() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearContent()
	})
}

// SetCreated sets the "created" field.
func (u *CommentsUpsertBulk) SetCreated(v time.Time) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetCreated(v)
	})
}

// UpdateCreated sets the "created" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateCreated() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateCreated()
	})
}

// ClearCreated clears the value of the "created" field.
func (u *CommentsUpsertBulk) ClearCreated() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearCreated()
	})
}

// SetThumb sets the "thumb" field.
func (u *CommentsUpsertBulk) SetThumb(v string) *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.SetThumb(v)
	})
}

// UpdateThumb sets the "thumb" field to the value that was provided on create.
func (u *CommentsUpsertBulk) UpdateThumb() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.UpdateThumb()
	})
}

// ClearThumb clears the value of the "thumb" field.
func (u *CommentsUpsertBulk) ClearThumb() *CommentsUpsertBulk {
	return u.Update(func(s *CommentsUpsert) {
		s.ClearThumb()
	})
}

// Exec executes the query.
func (u *CommentsUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CommentsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CommentsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CommentsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
