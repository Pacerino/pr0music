// Code generated by ent, DO NOT EDIT.

package comments

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pacerino/pr0music/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemID), v))
	})
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentID), v))
	})
}

// Up applies equality check predicate on the "up" field. It's identical to UpEQ.
func Up(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUp), v))
	})
}

// Down applies equality check predicate on the "down" field. It's identical to DownEQ.
func Down(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDown), v))
	})
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// Created applies equality check predicate on the "created" field. It's identical to CreatedEQ.
func Created(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// Thumb applies equality check predicate on the "thumb" field. It's identical to ThumbEQ.
func Thumb(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumb), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemID), v))
	})
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemID), v))
	})
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemID), v...))
	})
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemID), v...))
	})
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemID), v))
	})
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemID), v))
	})
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemID), v))
	})
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemID), v))
	})
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCommentID), v))
	})
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCommentID), v))
	})
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCommentID), v...))
	})
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCommentID), v...))
	})
}

// CommentIDGT applies the GT predicate on the "comment_id" field.
func CommentIDGT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCommentID), v))
	})
}

// CommentIDGTE applies the GTE predicate on the "comment_id" field.
func CommentIDGTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCommentID), v))
	})
}

// CommentIDLT applies the LT predicate on the "comment_id" field.
func CommentIDLT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCommentID), v))
	})
}

// CommentIDLTE applies the LTE predicate on the "comment_id" field.
func CommentIDLTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCommentID), v))
	})
}

// CommentIDIsNil applies the IsNil predicate on the "comment_id" field.
func CommentIDIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCommentID)))
	})
}

// CommentIDNotNil applies the NotNil predicate on the "comment_id" field.
func CommentIDNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCommentID)))
	})
}

// UpEQ applies the EQ predicate on the "up" field.
func UpEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUp), v))
	})
}

// UpNEQ applies the NEQ predicate on the "up" field.
func UpNEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUp), v))
	})
}

// UpIn applies the In predicate on the "up" field.
func UpIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUp), v...))
	})
}

// UpNotIn applies the NotIn predicate on the "up" field.
func UpNotIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUp), v...))
	})
}

// UpGT applies the GT predicate on the "up" field.
func UpGT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUp), v))
	})
}

// UpGTE applies the GTE predicate on the "up" field.
func UpGTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUp), v))
	})
}

// UpLT applies the LT predicate on the "up" field.
func UpLT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUp), v))
	})
}

// UpLTE applies the LTE predicate on the "up" field.
func UpLTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUp), v))
	})
}

// UpIsNil applies the IsNil predicate on the "up" field.
func UpIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUp)))
	})
}

// UpNotNil applies the NotNil predicate on the "up" field.
func UpNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUp)))
	})
}

// DownEQ applies the EQ predicate on the "down" field.
func DownEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDown), v))
	})
}

// DownNEQ applies the NEQ predicate on the "down" field.
func DownNEQ(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDown), v))
	})
}

// DownIn applies the In predicate on the "down" field.
func DownIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDown), v...))
	})
}

// DownNotIn applies the NotIn predicate on the "down" field.
func DownNotIn(vs ...int) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDown), v...))
	})
}

// DownGT applies the GT predicate on the "down" field.
func DownGT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDown), v))
	})
}

// DownGTE applies the GTE predicate on the "down" field.
func DownGTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDown), v))
	})
}

// DownLT applies the LT predicate on the "down" field.
func DownLT(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDown), v))
	})
}

// DownLTE applies the LTE predicate on the "down" field.
func DownLTE(v int) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDown), v))
	})
}

// DownIsNil applies the IsNil predicate on the "down" field.
func DownIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDown)))
	})
}

// DownNotNil applies the NotNil predicate on the "down" field.
func DownNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDown)))
	})
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContent), v))
	})
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContent), v))
	})
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldContent), v...))
	})
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldContent), v...))
	})
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContent), v))
	})
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContent), v))
	})
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContent), v))
	})
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContent), v))
	})
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContent), v))
	})
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContent), v))
	})
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContent), v))
	})
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldContent)))
	})
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldContent)))
	})
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContent), v))
	})
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContent), v))
	})
}

// CreatedEQ applies the EQ predicate on the "created" field.
func CreatedEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreated), v))
	})
}

// CreatedNEQ applies the NEQ predicate on the "created" field.
func CreatedNEQ(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreated), v))
	})
}

// CreatedIn applies the In predicate on the "created" field.
func CreatedIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreated), v...))
	})
}

// CreatedNotIn applies the NotIn predicate on the "created" field.
func CreatedNotIn(vs ...time.Time) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreated), v...))
	})
}

// CreatedGT applies the GT predicate on the "created" field.
func CreatedGT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreated), v))
	})
}

// CreatedGTE applies the GTE predicate on the "created" field.
func CreatedGTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreated), v))
	})
}

// CreatedLT applies the LT predicate on the "created" field.
func CreatedLT(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreated), v))
	})
}

// CreatedLTE applies the LTE predicate on the "created" field.
func CreatedLTE(v time.Time) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreated), v))
	})
}

// CreatedIsNil applies the IsNil predicate on the "created" field.
func CreatedIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreated)))
	})
}

// CreatedNotNil applies the NotNil predicate on the "created" field.
func CreatedNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreated)))
	})
}

// ThumbEQ applies the EQ predicate on the "thumb" field.
func ThumbEQ(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldThumb), v))
	})
}

// ThumbNEQ applies the NEQ predicate on the "thumb" field.
func ThumbNEQ(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldThumb), v))
	})
}

// ThumbIn applies the In predicate on the "thumb" field.
func ThumbIn(vs ...string) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldThumb), v...))
	})
}

// ThumbNotIn applies the NotIn predicate on the "thumb" field.
func ThumbNotIn(vs ...string) predicate.Comments {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldThumb), v...))
	})
}

// ThumbGT applies the GT predicate on the "thumb" field.
func ThumbGT(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldThumb), v))
	})
}

// ThumbGTE applies the GTE predicate on the "thumb" field.
func ThumbGTE(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldThumb), v))
	})
}

// ThumbLT applies the LT predicate on the "thumb" field.
func ThumbLT(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldThumb), v))
	})
}

// ThumbLTE applies the LTE predicate on the "thumb" field.
func ThumbLTE(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldThumb), v))
	})
}

// ThumbContains applies the Contains predicate on the "thumb" field.
func ThumbContains(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldThumb), v))
	})
}

// ThumbHasPrefix applies the HasPrefix predicate on the "thumb" field.
func ThumbHasPrefix(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldThumb), v))
	})
}

// ThumbHasSuffix applies the HasSuffix predicate on the "thumb" field.
func ThumbHasSuffix(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldThumb), v))
	})
}

// ThumbIsNil applies the IsNil predicate on the "thumb" field.
func ThumbIsNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldThumb)))
	})
}

// ThumbNotNil applies the NotNil predicate on the "thumb" field.
func ThumbNotNil() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldThumb)))
	})
}

// ThumbEqualFold applies the EqualFold predicate on the "thumb" field.
func ThumbEqualFold(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldThumb), v))
	})
}

// ThumbContainsFold applies the ContainsFold predicate on the "thumb" field.
func ThumbContainsFold(v string) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldThumb), v))
	})
}

// HasItems applies the HasEdge predicate on the "items" edge.
func HasItems() predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasItemsWith applies the HasEdge predicate on the "items" edge with a given conditions (other predicates).
func HasItemsWith(preds ...predicate.Items) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ItemsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ItemsTable, ItemsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comments) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comments) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comments) predicate.Comments {
	return predicate.Comments(func(s *sql.Selector) {
		p(s.Not())
	})
}
