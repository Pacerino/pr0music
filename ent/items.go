// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/Pacerino/pr0music/ent/items"
)

// Items is the model entity for the Items schema.
type Items struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ItemID holds the value of the "item_id" field.
	ItemID int `json:"item_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Album holds the value of the "album" field.
	Album string `json:"album,omitempty"`
	// Artist holds the value of the "artist" field.
	Artist string `json:"artist,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// AcrID holds the value of the "acr_id" field.
	AcrID string `json:"acr_id,omitempty"`
	// SpotifyURL holds the value of the "spotify_url" field.
	SpotifyURL string `json:"spotify_url,omitempty"`
	// SpotifyID holds the value of the "spotify_id" field.
	SpotifyID string `json:"spotify_id,omitempty"`
	// YoutubeURL holds the value of the "youtube_url" field.
	YoutubeURL string `json:"youtube_url,omitempty"`
	// YoutubeID holds the value of the "youtube_id" field.
	YoutubeID string `json:"youtube_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ItemsQuery when eager-loading is set.
	Edges ItemsEdges `json:"edges"`
}

// ItemsEdges holds the relations/edges for other nodes in the graph.
type ItemsEdges struct {
	// Comments holds the value of the comments edge.
	Comments []*Comments `json:"comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedComments map[string][]*Comments
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ItemsEdges) CommentsOrErr() ([]*Comments, error) {
	if e.loadedTypes[0] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Items) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case items.FieldID, items.FieldItemID:
			values[i] = new(sql.NullInt64)
		case items.FieldTitle, items.FieldAlbum, items.FieldArtist, items.FieldURL, items.FieldAcrID, items.FieldSpotifyURL, items.FieldSpotifyID, items.FieldYoutubeURL, items.FieldYoutubeID:
			values[i] = new(sql.NullString)
		case items.FieldCreatedAt, items.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Items", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Items fields.
func (i *Items) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case items.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case items.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case items.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case items.FieldItemID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field item_id", values[j])
			} else if value.Valid {
				i.ItemID = int(value.Int64)
			}
		case items.FieldTitle:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[j])
			} else if value.Valid {
				i.Title = value.String
			}
		case items.FieldAlbum:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field album", values[j])
			} else if value.Valid {
				i.Album = value.String
			}
		case items.FieldArtist:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field artist", values[j])
			} else if value.Valid {
				i.Artist = value.String
			}
		case items.FieldURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[j])
			} else if value.Valid {
				i.URL = value.String
			}
		case items.FieldAcrID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acr_id", values[j])
			} else if value.Valid {
				i.AcrID = value.String
			}
		case items.FieldSpotifyURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spotify_url", values[j])
			} else if value.Valid {
				i.SpotifyURL = value.String
			}
		case items.FieldSpotifyID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field spotify_id", values[j])
			} else if value.Valid {
				i.SpotifyID = value.String
			}
		case items.FieldYoutubeURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field youtube_url", values[j])
			} else if value.Valid {
				i.YoutubeURL = value.String
			}
		case items.FieldYoutubeID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field youtube_id", values[j])
			} else if value.Valid {
				i.YoutubeID = value.String
			}
		}
	}
	return nil
}

// QueryComments queries the "comments" edge of the Items entity.
func (i *Items) QueryComments() *CommentsQuery {
	return (&ItemsClient{config: i.config}).QueryComments(i)
}

// Update returns a builder for updating this Items.
// Note that you need to call Items.Unwrap() before calling this method if this Items
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Items) Update() *ItemsUpdateOne {
	return (&ItemsClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Items entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Items) Unwrap() *Items {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Items is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Items) String() string {
	var builder strings.Builder
	builder.WriteString("Items(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("item_id=")
	builder.WriteString(fmt.Sprintf("%v", i.ItemID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(i.Title)
	builder.WriteString(", ")
	builder.WriteString("album=")
	builder.WriteString(i.Album)
	builder.WriteString(", ")
	builder.WriteString("artist=")
	builder.WriteString(i.Artist)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(i.URL)
	builder.WriteString(", ")
	builder.WriteString("acr_id=")
	builder.WriteString(i.AcrID)
	builder.WriteString(", ")
	builder.WriteString("spotify_url=")
	builder.WriteString(i.SpotifyURL)
	builder.WriteString(", ")
	builder.WriteString("spotify_id=")
	builder.WriteString(i.SpotifyID)
	builder.WriteString(", ")
	builder.WriteString("youtube_url=")
	builder.WriteString(i.YoutubeURL)
	builder.WriteString(", ")
	builder.WriteString("youtube_id=")
	builder.WriteString(i.YoutubeID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedComments returns the Comments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (i *Items) NamedComments(name string) ([]*Comments, error) {
	if i.Edges.namedComments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := i.Edges.namedComments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (i *Items) appendNamedComments(name string, edges ...*Comments) {
	if i.Edges.namedComments == nil {
		i.Edges.namedComments = make(map[string][]*Comments)
	}
	if len(edges) == 0 {
		i.Edges.namedComments[name] = []*Comments{}
	} else {
		i.Edges.namedComments[name] = append(i.Edges.namedComments[name], edges...)
	}
}

// ItemsSlice is a parsable slice of Items.
type ItemsSlice []*Items

func (i ItemsSlice) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
