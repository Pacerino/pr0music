// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pacerino/pr0music/ent/comments"
	"github.com/Pacerino/pr0music/ent/items"
	"github.com/Pacerino/pr0music/ent/predicate"
)

// ItemsUpdate is the builder for updating Items entities.
type ItemsUpdate struct {
	config
	hooks    []Hook
	mutation *ItemsMutation
}

// Where appends a list predicates to the ItemsUpdate builder.
func (iu *ItemsUpdate) Where(ps ...predicate.Items) *ItemsUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *ItemsUpdate) SetUpdatedAt(t time.Time) *ItemsUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetTitle sets the "title" field.
func (iu *ItemsUpdate) SetTitle(s string) *ItemsUpdate {
	iu.mutation.SetTitle(s)
	return iu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableTitle(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetTitle(*s)
	}
	return iu
}

// ClearTitle clears the value of the "title" field.
func (iu *ItemsUpdate) ClearTitle() *ItemsUpdate {
	iu.mutation.ClearTitle()
	return iu
}

// SetAlbum sets the "album" field.
func (iu *ItemsUpdate) SetAlbum(s string) *ItemsUpdate {
	iu.mutation.SetAlbum(s)
	return iu
}

// SetNillableAlbum sets the "album" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableAlbum(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetAlbum(*s)
	}
	return iu
}

// ClearAlbum clears the value of the "album" field.
func (iu *ItemsUpdate) ClearAlbum() *ItemsUpdate {
	iu.mutation.ClearAlbum()
	return iu
}

// SetArtist sets the "artist" field.
func (iu *ItemsUpdate) SetArtist(s string) *ItemsUpdate {
	iu.mutation.SetArtist(s)
	return iu
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableArtist(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetArtist(*s)
	}
	return iu
}

// ClearArtist clears the value of the "artist" field.
func (iu *ItemsUpdate) ClearArtist() *ItemsUpdate {
	iu.mutation.ClearArtist()
	return iu
}

// SetURL sets the "url" field.
func (iu *ItemsUpdate) SetURL(s string) *ItemsUpdate {
	iu.mutation.SetURL(s)
	return iu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableURL(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetURL(*s)
	}
	return iu
}

// ClearURL clears the value of the "url" field.
func (iu *ItemsUpdate) ClearURL() *ItemsUpdate {
	iu.mutation.ClearURL()
	return iu
}

// SetAcrID sets the "acr_id" field.
func (iu *ItemsUpdate) SetAcrID(s string) *ItemsUpdate {
	iu.mutation.SetAcrID(s)
	return iu
}

// SetNillableAcrID sets the "acr_id" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableAcrID(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetAcrID(*s)
	}
	return iu
}

// ClearAcrID clears the value of the "acr_id" field.
func (iu *ItemsUpdate) ClearAcrID() *ItemsUpdate {
	iu.mutation.ClearAcrID()
	return iu
}

// SetSpotifyURL sets the "spotify_url" field.
func (iu *ItemsUpdate) SetSpotifyURL(s string) *ItemsUpdate {
	iu.mutation.SetSpotifyURL(s)
	return iu
}

// SetNillableSpotifyURL sets the "spotify_url" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableSpotifyURL(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetSpotifyURL(*s)
	}
	return iu
}

// ClearSpotifyURL clears the value of the "spotify_url" field.
func (iu *ItemsUpdate) ClearSpotifyURL() *ItemsUpdate {
	iu.mutation.ClearSpotifyURL()
	return iu
}

// SetSpotifyID sets the "spotify_id" field.
func (iu *ItemsUpdate) SetSpotifyID(s string) *ItemsUpdate {
	iu.mutation.SetSpotifyID(s)
	return iu
}

// SetNillableSpotifyID sets the "spotify_id" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableSpotifyID(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetSpotifyID(*s)
	}
	return iu
}

// ClearSpotifyID clears the value of the "spotify_id" field.
func (iu *ItemsUpdate) ClearSpotifyID() *ItemsUpdate {
	iu.mutation.ClearSpotifyID()
	return iu
}

// SetYoutubeURL sets the "youtube_url" field.
func (iu *ItemsUpdate) SetYoutubeURL(s string) *ItemsUpdate {
	iu.mutation.SetYoutubeURL(s)
	return iu
}

// SetNillableYoutubeURL sets the "youtube_url" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableYoutubeURL(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetYoutubeURL(*s)
	}
	return iu
}

// ClearYoutubeURL clears the value of the "youtube_url" field.
func (iu *ItemsUpdate) ClearYoutubeURL() *ItemsUpdate {
	iu.mutation.ClearYoutubeURL()
	return iu
}

// SetYoutubeID sets the "youtube_id" field.
func (iu *ItemsUpdate) SetYoutubeID(s string) *ItemsUpdate {
	iu.mutation.SetYoutubeID(s)
	return iu
}

// SetNillableYoutubeID sets the "youtube_id" field if the given value is not nil.
func (iu *ItemsUpdate) SetNillableYoutubeID(s *string) *ItemsUpdate {
	if s != nil {
		iu.SetYoutubeID(*s)
	}
	return iu
}

// ClearYoutubeID clears the value of the "youtube_id" field.
func (iu *ItemsUpdate) ClearYoutubeID() *ItemsUpdate {
	iu.mutation.ClearYoutubeID()
	return iu
}

// AddCommentIDs adds the "comments" edge to the Comments entity by IDs.
func (iu *ItemsUpdate) AddCommentIDs(ids ...int) *ItemsUpdate {
	iu.mutation.AddCommentIDs(ids...)
	return iu
}

// AddComments adds the "comments" edges to the Comments entity.
func (iu *ItemsUpdate) AddComments(c ...*Comments) *ItemsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.AddCommentIDs(ids...)
}

// Mutation returns the ItemsMutation object of the builder.
func (iu *ItemsUpdate) Mutation() *ItemsMutation {
	return iu.mutation
}

// ClearComments clears all "comments" edges to the Comments entity.
func (iu *ItemsUpdate) ClearComments() *ItemsUpdate {
	iu.mutation.ClearComments()
	return iu
}

// RemoveCommentIDs removes the "comments" edge to Comments entities by IDs.
func (iu *ItemsUpdate) RemoveCommentIDs(ids ...int) *ItemsUpdate {
	iu.mutation.RemoveCommentIDs(ids...)
	return iu
}

// RemoveComments removes "comments" edges to Comments entities.
func (iu *ItemsUpdate) RemoveComments(c ...*Comments) *ItemsUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemsUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemsUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemsUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemsUpdate) defaults() {
	if _, ok := iu.mutation.UpdatedAt(); !ok {
		v := items.UpdateDefaultUpdatedAt()
		iu.mutation.SetUpdatedAt(v)
	}
}

func (iu *ItemsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   items.Table,
			Columns: items.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: items.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(items.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Title(); ok {
		_spec.SetField(items.FieldTitle, field.TypeString, value)
	}
	if iu.mutation.TitleCleared() {
		_spec.ClearField(items.FieldTitle, field.TypeString)
	}
	if value, ok := iu.mutation.Album(); ok {
		_spec.SetField(items.FieldAlbum, field.TypeString, value)
	}
	if iu.mutation.AlbumCleared() {
		_spec.ClearField(items.FieldAlbum, field.TypeString)
	}
	if value, ok := iu.mutation.Artist(); ok {
		_spec.SetField(items.FieldArtist, field.TypeString, value)
	}
	if iu.mutation.ArtistCleared() {
		_spec.ClearField(items.FieldArtist, field.TypeString)
	}
	if value, ok := iu.mutation.URL(); ok {
		_spec.SetField(items.FieldURL, field.TypeString, value)
	}
	if iu.mutation.URLCleared() {
		_spec.ClearField(items.FieldURL, field.TypeString)
	}
	if value, ok := iu.mutation.AcrID(); ok {
		_spec.SetField(items.FieldAcrID, field.TypeString, value)
	}
	if iu.mutation.AcrIDCleared() {
		_spec.ClearField(items.FieldAcrID, field.TypeString)
	}
	if value, ok := iu.mutation.SpotifyURL(); ok {
		_spec.SetField(items.FieldSpotifyURL, field.TypeString, value)
	}
	if iu.mutation.SpotifyURLCleared() {
		_spec.ClearField(items.FieldSpotifyURL, field.TypeString)
	}
	if value, ok := iu.mutation.SpotifyID(); ok {
		_spec.SetField(items.FieldSpotifyID, field.TypeString, value)
	}
	if iu.mutation.SpotifyIDCleared() {
		_spec.ClearField(items.FieldSpotifyID, field.TypeString)
	}
	if value, ok := iu.mutation.YoutubeURL(); ok {
		_spec.SetField(items.FieldYoutubeURL, field.TypeString, value)
	}
	if iu.mutation.YoutubeURLCleared() {
		_spec.ClearField(items.FieldYoutubeURL, field.TypeString)
	}
	if value, ok := iu.mutation.YoutubeID(); ok {
		_spec.SetField(items.FieldYoutubeID, field.TypeString, value)
	}
	if iu.mutation.YoutubeIDCleared() {
		_spec.ClearField(items.FieldYoutubeID, field.TypeString)
	}
	if iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{items.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ItemsUpdateOne is the builder for updating a single Items entity.
type ItemsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *ItemsUpdateOne) SetUpdatedAt(t time.Time) *ItemsUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetTitle sets the "title" field.
func (iuo *ItemsUpdateOne) SetTitle(s string) *ItemsUpdateOne {
	iuo.mutation.SetTitle(s)
	return iuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableTitle(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetTitle(*s)
	}
	return iuo
}

// ClearTitle clears the value of the "title" field.
func (iuo *ItemsUpdateOne) ClearTitle() *ItemsUpdateOne {
	iuo.mutation.ClearTitle()
	return iuo
}

// SetAlbum sets the "album" field.
func (iuo *ItemsUpdateOne) SetAlbum(s string) *ItemsUpdateOne {
	iuo.mutation.SetAlbum(s)
	return iuo
}

// SetNillableAlbum sets the "album" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableAlbum(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetAlbum(*s)
	}
	return iuo
}

// ClearAlbum clears the value of the "album" field.
func (iuo *ItemsUpdateOne) ClearAlbum() *ItemsUpdateOne {
	iuo.mutation.ClearAlbum()
	return iuo
}

// SetArtist sets the "artist" field.
func (iuo *ItemsUpdateOne) SetArtist(s string) *ItemsUpdateOne {
	iuo.mutation.SetArtist(s)
	return iuo
}

// SetNillableArtist sets the "artist" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableArtist(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetArtist(*s)
	}
	return iuo
}

// ClearArtist clears the value of the "artist" field.
func (iuo *ItemsUpdateOne) ClearArtist() *ItemsUpdateOne {
	iuo.mutation.ClearArtist()
	return iuo
}

// SetURL sets the "url" field.
func (iuo *ItemsUpdateOne) SetURL(s string) *ItemsUpdateOne {
	iuo.mutation.SetURL(s)
	return iuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableURL(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetURL(*s)
	}
	return iuo
}

// ClearURL clears the value of the "url" field.
func (iuo *ItemsUpdateOne) ClearURL() *ItemsUpdateOne {
	iuo.mutation.ClearURL()
	return iuo
}

// SetAcrID sets the "acr_id" field.
func (iuo *ItemsUpdateOne) SetAcrID(s string) *ItemsUpdateOne {
	iuo.mutation.SetAcrID(s)
	return iuo
}

// SetNillableAcrID sets the "acr_id" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableAcrID(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetAcrID(*s)
	}
	return iuo
}

// ClearAcrID clears the value of the "acr_id" field.
func (iuo *ItemsUpdateOne) ClearAcrID() *ItemsUpdateOne {
	iuo.mutation.ClearAcrID()
	return iuo
}

// SetSpotifyURL sets the "spotify_url" field.
func (iuo *ItemsUpdateOne) SetSpotifyURL(s string) *ItemsUpdateOne {
	iuo.mutation.SetSpotifyURL(s)
	return iuo
}

// SetNillableSpotifyURL sets the "spotify_url" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableSpotifyURL(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetSpotifyURL(*s)
	}
	return iuo
}

// ClearSpotifyURL clears the value of the "spotify_url" field.
func (iuo *ItemsUpdateOne) ClearSpotifyURL() *ItemsUpdateOne {
	iuo.mutation.ClearSpotifyURL()
	return iuo
}

// SetSpotifyID sets the "spotify_id" field.
func (iuo *ItemsUpdateOne) SetSpotifyID(s string) *ItemsUpdateOne {
	iuo.mutation.SetSpotifyID(s)
	return iuo
}

// SetNillableSpotifyID sets the "spotify_id" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableSpotifyID(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetSpotifyID(*s)
	}
	return iuo
}

// ClearSpotifyID clears the value of the "spotify_id" field.
func (iuo *ItemsUpdateOne) ClearSpotifyID() *ItemsUpdateOne {
	iuo.mutation.ClearSpotifyID()
	return iuo
}

// SetYoutubeURL sets the "youtube_url" field.
func (iuo *ItemsUpdateOne) SetYoutubeURL(s string) *ItemsUpdateOne {
	iuo.mutation.SetYoutubeURL(s)
	return iuo
}

// SetNillableYoutubeURL sets the "youtube_url" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableYoutubeURL(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetYoutubeURL(*s)
	}
	return iuo
}

// ClearYoutubeURL clears the value of the "youtube_url" field.
func (iuo *ItemsUpdateOne) ClearYoutubeURL() *ItemsUpdateOne {
	iuo.mutation.ClearYoutubeURL()
	return iuo
}

// SetYoutubeID sets the "youtube_id" field.
func (iuo *ItemsUpdateOne) SetYoutubeID(s string) *ItemsUpdateOne {
	iuo.mutation.SetYoutubeID(s)
	return iuo
}

// SetNillableYoutubeID sets the "youtube_id" field if the given value is not nil.
func (iuo *ItemsUpdateOne) SetNillableYoutubeID(s *string) *ItemsUpdateOne {
	if s != nil {
		iuo.SetYoutubeID(*s)
	}
	return iuo
}

// ClearYoutubeID clears the value of the "youtube_id" field.
func (iuo *ItemsUpdateOne) ClearYoutubeID() *ItemsUpdateOne {
	iuo.mutation.ClearYoutubeID()
	return iuo
}

// AddCommentIDs adds the "comments" edge to the Comments entity by IDs.
func (iuo *ItemsUpdateOne) AddCommentIDs(ids ...int) *ItemsUpdateOne {
	iuo.mutation.AddCommentIDs(ids...)
	return iuo
}

// AddComments adds the "comments" edges to the Comments entity.
func (iuo *ItemsUpdateOne) AddComments(c ...*Comments) *ItemsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.AddCommentIDs(ids...)
}

// Mutation returns the ItemsMutation object of the builder.
func (iuo *ItemsUpdateOne) Mutation() *ItemsMutation {
	return iuo.mutation
}

// ClearComments clears all "comments" edges to the Comments entity.
func (iuo *ItemsUpdateOne) ClearComments() *ItemsUpdateOne {
	iuo.mutation.ClearComments()
	return iuo
}

// RemoveCommentIDs removes the "comments" edge to Comments entities by IDs.
func (iuo *ItemsUpdateOne) RemoveCommentIDs(ids ...int) *ItemsUpdateOne {
	iuo.mutation.RemoveCommentIDs(ids...)
	return iuo
}

// RemoveComments removes "comments" edges to Comments entities.
func (iuo *ItemsUpdateOne) RemoveComments(c ...*Comments) *ItemsUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iuo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemsUpdateOne) Select(field string, fields ...string) *ItemsUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Items entity.
func (iuo *ItemsUpdateOne) Save(ctx context.Context) (*Items, error) {
	var (
		err  error
		node *Items
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Items)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ItemsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemsUpdateOne) SaveX(ctx context.Context) *Items {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemsUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemsUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemsUpdateOne) defaults() {
	if _, ok := iuo.mutation.UpdatedAt(); !ok {
		v := items.UpdateDefaultUpdatedAt()
		iuo.mutation.SetUpdatedAt(v)
	}
}

func (iuo *ItemsUpdateOne) sqlSave(ctx context.Context) (_node *Items, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   items.Table,
			Columns: items.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: items.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Items.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, items.FieldID)
		for _, f := range fields {
			if !items.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != items.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(items.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Title(); ok {
		_spec.SetField(items.FieldTitle, field.TypeString, value)
	}
	if iuo.mutation.TitleCleared() {
		_spec.ClearField(items.FieldTitle, field.TypeString)
	}
	if value, ok := iuo.mutation.Album(); ok {
		_spec.SetField(items.FieldAlbum, field.TypeString, value)
	}
	if iuo.mutation.AlbumCleared() {
		_spec.ClearField(items.FieldAlbum, field.TypeString)
	}
	if value, ok := iuo.mutation.Artist(); ok {
		_spec.SetField(items.FieldArtist, field.TypeString, value)
	}
	if iuo.mutation.ArtistCleared() {
		_spec.ClearField(items.FieldArtist, field.TypeString)
	}
	if value, ok := iuo.mutation.URL(); ok {
		_spec.SetField(items.FieldURL, field.TypeString, value)
	}
	if iuo.mutation.URLCleared() {
		_spec.ClearField(items.FieldURL, field.TypeString)
	}
	if value, ok := iuo.mutation.AcrID(); ok {
		_spec.SetField(items.FieldAcrID, field.TypeString, value)
	}
	if iuo.mutation.AcrIDCleared() {
		_spec.ClearField(items.FieldAcrID, field.TypeString)
	}
	if value, ok := iuo.mutation.SpotifyURL(); ok {
		_spec.SetField(items.FieldSpotifyURL, field.TypeString, value)
	}
	if iuo.mutation.SpotifyURLCleared() {
		_spec.ClearField(items.FieldSpotifyURL, field.TypeString)
	}
	if value, ok := iuo.mutation.SpotifyID(); ok {
		_spec.SetField(items.FieldSpotifyID, field.TypeString, value)
	}
	if iuo.mutation.SpotifyIDCleared() {
		_spec.ClearField(items.FieldSpotifyID, field.TypeString)
	}
	if value, ok := iuo.mutation.YoutubeURL(); ok {
		_spec.SetField(items.FieldYoutubeURL, field.TypeString, value)
	}
	if iuo.mutation.YoutubeURLCleared() {
		_spec.ClearField(items.FieldYoutubeURL, field.TypeString)
	}
	if value, ok := iuo.mutation.YoutubeID(); ok {
		_spec.SetField(items.FieldYoutubeID, field.TypeString, value)
	}
	if iuo.mutation.YoutubeIDCleared() {
		_spec.ClearField(items.FieldYoutubeID, field.TypeString)
	}
	if iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !iuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   items.CommentsTable,
			Columns: []string{items.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Items{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{items.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
