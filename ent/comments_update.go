// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Pacerino/pr0music/ent/comments"
	"github.com/Pacerino/pr0music/ent/items"
	"github.com/Pacerino/pr0music/ent/predicate"
)

// CommentsUpdate is the builder for updating Comments entities.
type CommentsUpdate struct {
	config
	hooks    []Hook
	mutation *CommentsMutation
}

// Where appends a list predicates to the CommentsUpdate builder.
func (cu *CommentsUpdate) Where(ps ...predicate.Comments) *CommentsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CommentsUpdate) SetUpdatedAt(t time.Time) *CommentsUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetCommentID sets the "comment_id" field.
func (cu *CommentsUpdate) SetCommentID(i int) *CommentsUpdate {
	cu.mutation.ResetCommentID()
	cu.mutation.SetCommentID(i)
	return cu
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableCommentID(i *int) *CommentsUpdate {
	if i != nil {
		cu.SetCommentID(*i)
	}
	return cu
}

// AddCommentID adds i to the "comment_id" field.
func (cu *CommentsUpdate) AddCommentID(i int) *CommentsUpdate {
	cu.mutation.AddCommentID(i)
	return cu
}

// ClearCommentID clears the value of the "comment_id" field.
func (cu *CommentsUpdate) ClearCommentID() *CommentsUpdate {
	cu.mutation.ClearCommentID()
	return cu
}

// SetUp sets the "up" field.
func (cu *CommentsUpdate) SetUp(i int) *CommentsUpdate {
	cu.mutation.ResetUp()
	cu.mutation.SetUp(i)
	return cu
}

// SetNillableUp sets the "up" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableUp(i *int) *CommentsUpdate {
	if i != nil {
		cu.SetUp(*i)
	}
	return cu
}

// AddUp adds i to the "up" field.
func (cu *CommentsUpdate) AddUp(i int) *CommentsUpdate {
	cu.mutation.AddUp(i)
	return cu
}

// ClearUp clears the value of the "up" field.
func (cu *CommentsUpdate) ClearUp() *CommentsUpdate {
	cu.mutation.ClearUp()
	return cu
}

// SetDown sets the "down" field.
func (cu *CommentsUpdate) SetDown(i int) *CommentsUpdate {
	cu.mutation.ResetDown()
	cu.mutation.SetDown(i)
	return cu
}

// SetNillableDown sets the "down" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableDown(i *int) *CommentsUpdate {
	if i != nil {
		cu.SetDown(*i)
	}
	return cu
}

// AddDown adds i to the "down" field.
func (cu *CommentsUpdate) AddDown(i int) *CommentsUpdate {
	cu.mutation.AddDown(i)
	return cu
}

// ClearDown clears the value of the "down" field.
func (cu *CommentsUpdate) ClearDown() *CommentsUpdate {
	cu.mutation.ClearDown()
	return cu
}

// SetContent sets the "content" field.
func (cu *CommentsUpdate) SetContent(s string) *CommentsUpdate {
	cu.mutation.SetContent(s)
	return cu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableContent(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetContent(*s)
	}
	return cu
}

// ClearContent clears the value of the "content" field.
func (cu *CommentsUpdate) ClearContent() *CommentsUpdate {
	cu.mutation.ClearContent()
	return cu
}

// SetCreated sets the "created" field.
func (cu *CommentsUpdate) SetCreated(t time.Time) *CommentsUpdate {
	cu.mutation.SetCreated(t)
	return cu
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableCreated(t *time.Time) *CommentsUpdate {
	if t != nil {
		cu.SetCreated(*t)
	}
	return cu
}

// ClearCreated clears the value of the "created" field.
func (cu *CommentsUpdate) ClearCreated() *CommentsUpdate {
	cu.mutation.ClearCreated()
	return cu
}

// SetThumb sets the "thumb" field.
func (cu *CommentsUpdate) SetThumb(s string) *CommentsUpdate {
	cu.mutation.SetThumb(s)
	return cu
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (cu *CommentsUpdate) SetNillableThumb(s *string) *CommentsUpdate {
	if s != nil {
		cu.SetThumb(*s)
	}
	return cu
}

// ClearThumb clears the value of the "thumb" field.
func (cu *CommentsUpdate) ClearThumb() *CommentsUpdate {
	cu.mutation.ClearThumb()
	return cu
}

// SetItemsID sets the "items" edge to the Items entity by ID.
func (cu *CommentsUpdate) SetItemsID(id int) *CommentsUpdate {
	cu.mutation.SetItemsID(id)
	return cu
}

// SetNillableItemsID sets the "items" edge to the Items entity by ID if the given value is not nil.
func (cu *CommentsUpdate) SetNillableItemsID(id *int) *CommentsUpdate {
	if id != nil {
		cu = cu.SetItemsID(*id)
	}
	return cu
}

// SetItems sets the "items" edge to the Items entity.
func (cu *CommentsUpdate) SetItems(i *Items) *CommentsUpdate {
	return cu.SetItemsID(i.ID)
}

// Mutation returns the CommentsMutation object of the builder.
func (cu *CommentsUpdate) Mutation() *CommentsMutation {
	return cu.mutation
}

// ClearItems clears the "items" edge to the Items entity.
func (cu *CommentsUpdate) ClearItems() *CommentsUpdate {
	cu.mutation.ClearItems()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CommentsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CommentsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CommentsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CommentsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CommentsUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := comments.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *CommentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comments.Table,
			Columns: comments.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comments.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(comments.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.CommentID(); ok {
		_spec.SetField(comments.FieldCommentID, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCommentID(); ok {
		_spec.AddField(comments.FieldCommentID, field.TypeInt, value)
	}
	if cu.mutation.CommentIDCleared() {
		_spec.ClearField(comments.FieldCommentID, field.TypeInt)
	}
	if value, ok := cu.mutation.Up(); ok {
		_spec.SetField(comments.FieldUp, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedUp(); ok {
		_spec.AddField(comments.FieldUp, field.TypeInt, value)
	}
	if cu.mutation.UpCleared() {
		_spec.ClearField(comments.FieldUp, field.TypeInt)
	}
	if value, ok := cu.mutation.Down(); ok {
		_spec.SetField(comments.FieldDown, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDown(); ok {
		_spec.AddField(comments.FieldDown, field.TypeInt, value)
	}
	if cu.mutation.DownCleared() {
		_spec.ClearField(comments.FieldDown, field.TypeInt)
	}
	if value, ok := cu.mutation.Content(); ok {
		_spec.SetField(comments.FieldContent, field.TypeString, value)
	}
	if cu.mutation.ContentCleared() {
		_spec.ClearField(comments.FieldContent, field.TypeString)
	}
	if value, ok := cu.mutation.Created(); ok {
		_spec.SetField(comments.FieldCreated, field.TypeTime, value)
	}
	if cu.mutation.CreatedCleared() {
		_spec.ClearField(comments.FieldCreated, field.TypeTime)
	}
	if value, ok := cu.mutation.Thumb(); ok {
		_spec.SetField(comments.FieldThumb, field.TypeString, value)
	}
	if cu.mutation.ThumbCleared() {
		_spec.ClearField(comments.FieldThumb, field.TypeString)
	}
	if cu.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.ItemsTable,
			Columns: []string{comments.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: items.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.ItemsTable,
			Columns: []string{comments.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: items.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CommentsUpdateOne is the builder for updating a single Comments entity.
type CommentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CommentsUpdateOne) SetUpdatedAt(t time.Time) *CommentsUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetCommentID sets the "comment_id" field.
func (cuo *CommentsUpdateOne) SetCommentID(i int) *CommentsUpdateOne {
	cuo.mutation.ResetCommentID()
	cuo.mutation.SetCommentID(i)
	return cuo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableCommentID(i *int) *CommentsUpdateOne {
	if i != nil {
		cuo.SetCommentID(*i)
	}
	return cuo
}

// AddCommentID adds i to the "comment_id" field.
func (cuo *CommentsUpdateOne) AddCommentID(i int) *CommentsUpdateOne {
	cuo.mutation.AddCommentID(i)
	return cuo
}

// ClearCommentID clears the value of the "comment_id" field.
func (cuo *CommentsUpdateOne) ClearCommentID() *CommentsUpdateOne {
	cuo.mutation.ClearCommentID()
	return cuo
}

// SetUp sets the "up" field.
func (cuo *CommentsUpdateOne) SetUp(i int) *CommentsUpdateOne {
	cuo.mutation.ResetUp()
	cuo.mutation.SetUp(i)
	return cuo
}

// SetNillableUp sets the "up" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableUp(i *int) *CommentsUpdateOne {
	if i != nil {
		cuo.SetUp(*i)
	}
	return cuo
}

// AddUp adds i to the "up" field.
func (cuo *CommentsUpdateOne) AddUp(i int) *CommentsUpdateOne {
	cuo.mutation.AddUp(i)
	return cuo
}

// ClearUp clears the value of the "up" field.
func (cuo *CommentsUpdateOne) ClearUp() *CommentsUpdateOne {
	cuo.mutation.ClearUp()
	return cuo
}

// SetDown sets the "down" field.
func (cuo *CommentsUpdateOne) SetDown(i int) *CommentsUpdateOne {
	cuo.mutation.ResetDown()
	cuo.mutation.SetDown(i)
	return cuo
}

// SetNillableDown sets the "down" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableDown(i *int) *CommentsUpdateOne {
	if i != nil {
		cuo.SetDown(*i)
	}
	return cuo
}

// AddDown adds i to the "down" field.
func (cuo *CommentsUpdateOne) AddDown(i int) *CommentsUpdateOne {
	cuo.mutation.AddDown(i)
	return cuo
}

// ClearDown clears the value of the "down" field.
func (cuo *CommentsUpdateOne) ClearDown() *CommentsUpdateOne {
	cuo.mutation.ClearDown()
	return cuo
}

// SetContent sets the "content" field.
func (cuo *CommentsUpdateOne) SetContent(s string) *CommentsUpdateOne {
	cuo.mutation.SetContent(s)
	return cuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableContent(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetContent(*s)
	}
	return cuo
}

// ClearContent clears the value of the "content" field.
func (cuo *CommentsUpdateOne) ClearContent() *CommentsUpdateOne {
	cuo.mutation.ClearContent()
	return cuo
}

// SetCreated sets the "created" field.
func (cuo *CommentsUpdateOne) SetCreated(t time.Time) *CommentsUpdateOne {
	cuo.mutation.SetCreated(t)
	return cuo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableCreated(t *time.Time) *CommentsUpdateOne {
	if t != nil {
		cuo.SetCreated(*t)
	}
	return cuo
}

// ClearCreated clears the value of the "created" field.
func (cuo *CommentsUpdateOne) ClearCreated() *CommentsUpdateOne {
	cuo.mutation.ClearCreated()
	return cuo
}

// SetThumb sets the "thumb" field.
func (cuo *CommentsUpdateOne) SetThumb(s string) *CommentsUpdateOne {
	cuo.mutation.SetThumb(s)
	return cuo
}

// SetNillableThumb sets the "thumb" field if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableThumb(s *string) *CommentsUpdateOne {
	if s != nil {
		cuo.SetThumb(*s)
	}
	return cuo
}

// ClearThumb clears the value of the "thumb" field.
func (cuo *CommentsUpdateOne) ClearThumb() *CommentsUpdateOne {
	cuo.mutation.ClearThumb()
	return cuo
}

// SetItemsID sets the "items" edge to the Items entity by ID.
func (cuo *CommentsUpdateOne) SetItemsID(id int) *CommentsUpdateOne {
	cuo.mutation.SetItemsID(id)
	return cuo
}

// SetNillableItemsID sets the "items" edge to the Items entity by ID if the given value is not nil.
func (cuo *CommentsUpdateOne) SetNillableItemsID(id *int) *CommentsUpdateOne {
	if id != nil {
		cuo = cuo.SetItemsID(*id)
	}
	return cuo
}

// SetItems sets the "items" edge to the Items entity.
func (cuo *CommentsUpdateOne) SetItems(i *Items) *CommentsUpdateOne {
	return cuo.SetItemsID(i.ID)
}

// Mutation returns the CommentsMutation object of the builder.
func (cuo *CommentsUpdateOne) Mutation() *CommentsMutation {
	return cuo.mutation
}

// ClearItems clears the "items" edge to the Items entity.
func (cuo *CommentsUpdateOne) ClearItems() *CommentsUpdateOne {
	cuo.mutation.ClearItems()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CommentsUpdateOne) Select(field string, fields ...string) *CommentsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comments entity.
func (cuo *CommentsUpdateOne) Save(ctx context.Context) (*Comments, error) {
	var (
		err  error
		node *Comments
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommentsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Comments)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CommentsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CommentsUpdateOne) SaveX(ctx context.Context) *Comments {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CommentsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CommentsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CommentsUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := comments.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *CommentsUpdateOne) sqlSave(ctx context.Context) (_node *Comments, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comments.Table,
			Columns: comments.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: comments.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comments.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comments.FieldID)
		for _, f := range fields {
			if !comments.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comments.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(comments.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.CommentID(); ok {
		_spec.SetField(comments.FieldCommentID, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCommentID(); ok {
		_spec.AddField(comments.FieldCommentID, field.TypeInt, value)
	}
	if cuo.mutation.CommentIDCleared() {
		_spec.ClearField(comments.FieldCommentID, field.TypeInt)
	}
	if value, ok := cuo.mutation.Up(); ok {
		_spec.SetField(comments.FieldUp, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedUp(); ok {
		_spec.AddField(comments.FieldUp, field.TypeInt, value)
	}
	if cuo.mutation.UpCleared() {
		_spec.ClearField(comments.FieldUp, field.TypeInt)
	}
	if value, ok := cuo.mutation.Down(); ok {
		_spec.SetField(comments.FieldDown, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDown(); ok {
		_spec.AddField(comments.FieldDown, field.TypeInt, value)
	}
	if cuo.mutation.DownCleared() {
		_spec.ClearField(comments.FieldDown, field.TypeInt)
	}
	if value, ok := cuo.mutation.Content(); ok {
		_spec.SetField(comments.FieldContent, field.TypeString, value)
	}
	if cuo.mutation.ContentCleared() {
		_spec.ClearField(comments.FieldContent, field.TypeString)
	}
	if value, ok := cuo.mutation.Created(); ok {
		_spec.SetField(comments.FieldCreated, field.TypeTime, value)
	}
	if cuo.mutation.CreatedCleared() {
		_spec.ClearField(comments.FieldCreated, field.TypeTime)
	}
	if value, ok := cuo.mutation.Thumb(); ok {
		_spec.SetField(comments.FieldThumb, field.TypeString, value)
	}
	if cuo.mutation.ThumbCleared() {
		_spec.ClearField(comments.FieldThumb, field.TypeString)
	}
	if cuo.mutation.ItemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.ItemsTable,
			Columns: []string{comments.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: items.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ItemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comments.ItemsTable,
			Columns: []string{comments.ItemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: items.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comments{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comments.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
