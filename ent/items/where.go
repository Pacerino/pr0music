// Code generated by ent, DO NOT EDIT.

package items

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Pacerino/pr0music/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// ItemID applies equality check predicate on the "item_id" field. It's identical to ItemIDEQ.
func ItemID(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemID), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Album applies equality check predicate on the "album" field. It's identical to AlbumEQ.
func Album(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbum), v))
	})
}

// Artist applies equality check predicate on the "artist" field. It's identical to ArtistEQ.
func Artist(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArtist), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// AcrID applies equality check predicate on the "acr_id" field. It's identical to AcrIDEQ.
func AcrID(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAcrID), v))
	})
}

// SpotifyURL applies equality check predicate on the "spotify_url" field. It's identical to SpotifyURLEQ.
func SpotifyURL(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyID applies equality check predicate on the "spotify_id" field. It's identical to SpotifyIDEQ.
func SpotifyID(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpotifyID), v))
	})
}

// YoutubeURL applies equality check predicate on the "youtube_url" field. It's identical to YoutubeURLEQ.
func YoutubeURL(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeID applies equality check predicate on the "youtube_id" field. It's identical to YoutubeIDEQ.
func YoutubeID(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutubeID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// ItemIDEQ applies the EQ predicate on the "item_id" field.
func ItemIDEQ(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItemID), v))
	})
}

// ItemIDNEQ applies the NEQ predicate on the "item_id" field.
func ItemIDNEQ(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItemID), v))
	})
}

// ItemIDIn applies the In predicate on the "item_id" field.
func ItemIDIn(vs ...int) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldItemID), v...))
	})
}

// ItemIDNotIn applies the NotIn predicate on the "item_id" field.
func ItemIDNotIn(vs ...int) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldItemID), v...))
	})
}

// ItemIDGT applies the GT predicate on the "item_id" field.
func ItemIDGT(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItemID), v))
	})
}

// ItemIDGTE applies the GTE predicate on the "item_id" field.
func ItemIDGTE(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItemID), v))
	})
}

// ItemIDLT applies the LT predicate on the "item_id" field.
func ItemIDLT(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItemID), v))
	})
}

// ItemIDLTE applies the LTE predicate on the "item_id" field.
func ItemIDLTE(v int) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItemID), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// AlbumEQ applies the EQ predicate on the "album" field.
func AlbumEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlbum), v))
	})
}

// AlbumNEQ applies the NEQ predicate on the "album" field.
func AlbumNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlbum), v))
	})
}

// AlbumIn applies the In predicate on the "album" field.
func AlbumIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAlbum), v...))
	})
}

// AlbumNotIn applies the NotIn predicate on the "album" field.
func AlbumNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAlbum), v...))
	})
}

// AlbumGT applies the GT predicate on the "album" field.
func AlbumGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlbum), v))
	})
}

// AlbumGTE applies the GTE predicate on the "album" field.
func AlbumGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlbum), v))
	})
}

// AlbumLT applies the LT predicate on the "album" field.
func AlbumLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlbum), v))
	})
}

// AlbumLTE applies the LTE predicate on the "album" field.
func AlbumLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlbum), v))
	})
}

// AlbumContains applies the Contains predicate on the "album" field.
func AlbumContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlbum), v))
	})
}

// AlbumHasPrefix applies the HasPrefix predicate on the "album" field.
func AlbumHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlbum), v))
	})
}

// AlbumHasSuffix applies the HasSuffix predicate on the "album" field.
func AlbumHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlbum), v))
	})
}

// AlbumIsNil applies the IsNil predicate on the "album" field.
func AlbumIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlbum)))
	})
}

// AlbumNotNil applies the NotNil predicate on the "album" field.
func AlbumNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlbum)))
	})
}

// AlbumEqualFold applies the EqualFold predicate on the "album" field.
func AlbumEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlbum), v))
	})
}

// AlbumContainsFold applies the ContainsFold predicate on the "album" field.
func AlbumContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlbum), v))
	})
}

// ArtistEQ applies the EQ predicate on the "artist" field.
func ArtistEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArtist), v))
	})
}

// ArtistNEQ applies the NEQ predicate on the "artist" field.
func ArtistNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArtist), v))
	})
}

// ArtistIn applies the In predicate on the "artist" field.
func ArtistIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldArtist), v...))
	})
}

// ArtistNotIn applies the NotIn predicate on the "artist" field.
func ArtistNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldArtist), v...))
	})
}

// ArtistGT applies the GT predicate on the "artist" field.
func ArtistGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldArtist), v))
	})
}

// ArtistGTE applies the GTE predicate on the "artist" field.
func ArtistGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldArtist), v))
	})
}

// ArtistLT applies the LT predicate on the "artist" field.
func ArtistLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldArtist), v))
	})
}

// ArtistLTE applies the LTE predicate on the "artist" field.
func ArtistLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldArtist), v))
	})
}

// ArtistContains applies the Contains predicate on the "artist" field.
func ArtistContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldArtist), v))
	})
}

// ArtistHasPrefix applies the HasPrefix predicate on the "artist" field.
func ArtistHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldArtist), v))
	})
}

// ArtistHasSuffix applies the HasSuffix predicate on the "artist" field.
func ArtistHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldArtist), v))
	})
}

// ArtistIsNil applies the IsNil predicate on the "artist" field.
func ArtistIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldArtist)))
	})
}

// ArtistNotNil applies the NotNil predicate on the "artist" field.
func ArtistNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldArtist)))
	})
}

// ArtistEqualFold applies the EqualFold predicate on the "artist" field.
func ArtistEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldArtist), v))
	})
}

// ArtistContainsFold applies the ContainsFold predicate on the "artist" field.
func ArtistContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldArtist), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// AcrIDEQ applies the EQ predicate on the "acr_id" field.
func AcrIDEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAcrID), v))
	})
}

// AcrIDNEQ applies the NEQ predicate on the "acr_id" field.
func AcrIDNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAcrID), v))
	})
}

// AcrIDIn applies the In predicate on the "acr_id" field.
func AcrIDIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAcrID), v...))
	})
}

// AcrIDNotIn applies the NotIn predicate on the "acr_id" field.
func AcrIDNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAcrID), v...))
	})
}

// AcrIDGT applies the GT predicate on the "acr_id" field.
func AcrIDGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAcrID), v))
	})
}

// AcrIDGTE applies the GTE predicate on the "acr_id" field.
func AcrIDGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAcrID), v))
	})
}

// AcrIDLT applies the LT predicate on the "acr_id" field.
func AcrIDLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAcrID), v))
	})
}

// AcrIDLTE applies the LTE predicate on the "acr_id" field.
func AcrIDLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAcrID), v))
	})
}

// AcrIDContains applies the Contains predicate on the "acr_id" field.
func AcrIDContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAcrID), v))
	})
}

// AcrIDHasPrefix applies the HasPrefix predicate on the "acr_id" field.
func AcrIDHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAcrID), v))
	})
}

// AcrIDHasSuffix applies the HasSuffix predicate on the "acr_id" field.
func AcrIDHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAcrID), v))
	})
}

// AcrIDIsNil applies the IsNil predicate on the "acr_id" field.
func AcrIDIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAcrID)))
	})
}

// AcrIDNotNil applies the NotNil predicate on the "acr_id" field.
func AcrIDNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAcrID)))
	})
}

// AcrIDEqualFold applies the EqualFold predicate on the "acr_id" field.
func AcrIDEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAcrID), v))
	})
}

// AcrIDContainsFold applies the ContainsFold predicate on the "acr_id" field.
func AcrIDContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAcrID), v))
	})
}

// SpotifyURLEQ applies the EQ predicate on the "spotify_url" field.
func SpotifyURLEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLNEQ applies the NEQ predicate on the "spotify_url" field.
func SpotifyURLNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLIn applies the In predicate on the "spotify_url" field.
func SpotifyURLIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpotifyURL), v...))
	})
}

// SpotifyURLNotIn applies the NotIn predicate on the "spotify_url" field.
func SpotifyURLNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpotifyURL), v...))
	})
}

// SpotifyURLGT applies the GT predicate on the "spotify_url" field.
func SpotifyURLGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLGTE applies the GTE predicate on the "spotify_url" field.
func SpotifyURLGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLLT applies the LT predicate on the "spotify_url" field.
func SpotifyURLLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLLTE applies the LTE predicate on the "spotify_url" field.
func SpotifyURLLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLContains applies the Contains predicate on the "spotify_url" field.
func SpotifyURLContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLHasPrefix applies the HasPrefix predicate on the "spotify_url" field.
func SpotifyURLHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLHasSuffix applies the HasSuffix predicate on the "spotify_url" field.
func SpotifyURLHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLIsNil applies the IsNil predicate on the "spotify_url" field.
func SpotifyURLIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpotifyURL)))
	})
}

// SpotifyURLNotNil applies the NotNil predicate on the "spotify_url" field.
func SpotifyURLNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpotifyURL)))
	})
}

// SpotifyURLEqualFold applies the EqualFold predicate on the "spotify_url" field.
func SpotifyURLEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyURLContainsFold applies the ContainsFold predicate on the "spotify_url" field.
func SpotifyURLContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpotifyURL), v))
	})
}

// SpotifyIDEQ applies the EQ predicate on the "spotify_id" field.
func SpotifyIDEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDNEQ applies the NEQ predicate on the "spotify_id" field.
func SpotifyIDNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDIn applies the In predicate on the "spotify_id" field.
func SpotifyIDIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSpotifyID), v...))
	})
}

// SpotifyIDNotIn applies the NotIn predicate on the "spotify_id" field.
func SpotifyIDNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSpotifyID), v...))
	})
}

// SpotifyIDGT applies the GT predicate on the "spotify_id" field.
func SpotifyIDGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDGTE applies the GTE predicate on the "spotify_id" field.
func SpotifyIDGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDLT applies the LT predicate on the "spotify_id" field.
func SpotifyIDLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDLTE applies the LTE predicate on the "spotify_id" field.
func SpotifyIDLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDContains applies the Contains predicate on the "spotify_id" field.
func SpotifyIDContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDHasPrefix applies the HasPrefix predicate on the "spotify_id" field.
func SpotifyIDHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDHasSuffix applies the HasSuffix predicate on the "spotify_id" field.
func SpotifyIDHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDIsNil applies the IsNil predicate on the "spotify_id" field.
func SpotifyIDIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSpotifyID)))
	})
}

// SpotifyIDNotNil applies the NotNil predicate on the "spotify_id" field.
func SpotifyIDNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSpotifyID)))
	})
}

// SpotifyIDEqualFold applies the EqualFold predicate on the "spotify_id" field.
func SpotifyIDEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSpotifyID), v))
	})
}

// SpotifyIDContainsFold applies the ContainsFold predicate on the "spotify_id" field.
func SpotifyIDContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSpotifyID), v))
	})
}

// YoutubeURLEQ applies the EQ predicate on the "youtube_url" field.
func YoutubeURLEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLNEQ applies the NEQ predicate on the "youtube_url" field.
func YoutubeURLNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLIn applies the In predicate on the "youtube_url" field.
func YoutubeURLIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYoutubeURL), v...))
	})
}

// YoutubeURLNotIn applies the NotIn predicate on the "youtube_url" field.
func YoutubeURLNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYoutubeURL), v...))
	})
}

// YoutubeURLGT applies the GT predicate on the "youtube_url" field.
func YoutubeURLGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLGTE applies the GTE predicate on the "youtube_url" field.
func YoutubeURLGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLLT applies the LT predicate on the "youtube_url" field.
func YoutubeURLLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLLTE applies the LTE predicate on the "youtube_url" field.
func YoutubeURLLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLContains applies the Contains predicate on the "youtube_url" field.
func YoutubeURLContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLHasPrefix applies the HasPrefix predicate on the "youtube_url" field.
func YoutubeURLHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLHasSuffix applies the HasSuffix predicate on the "youtube_url" field.
func YoutubeURLHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLIsNil applies the IsNil predicate on the "youtube_url" field.
func YoutubeURLIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYoutubeURL)))
	})
}

// YoutubeURLNotNil applies the NotNil predicate on the "youtube_url" field.
func YoutubeURLNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYoutubeURL)))
	})
}

// YoutubeURLEqualFold applies the EqualFold predicate on the "youtube_url" field.
func YoutubeURLEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeURLContainsFold applies the ContainsFold predicate on the "youtube_url" field.
func YoutubeURLContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYoutubeURL), v))
	})
}

// YoutubeIDEQ applies the EQ predicate on the "youtube_id" field.
func YoutubeIDEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDNEQ applies the NEQ predicate on the "youtube_id" field.
func YoutubeIDNEQ(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDIn applies the In predicate on the "youtube_id" field.
func YoutubeIDIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYoutubeID), v...))
	})
}

// YoutubeIDNotIn applies the NotIn predicate on the "youtube_id" field.
func YoutubeIDNotIn(vs ...string) predicate.Items {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYoutubeID), v...))
	})
}

// YoutubeIDGT applies the GT predicate on the "youtube_id" field.
func YoutubeIDGT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDGTE applies the GTE predicate on the "youtube_id" field.
func YoutubeIDGTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDLT applies the LT predicate on the "youtube_id" field.
func YoutubeIDLT(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDLTE applies the LTE predicate on the "youtube_id" field.
func YoutubeIDLTE(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDContains applies the Contains predicate on the "youtube_id" field.
func YoutubeIDContains(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDHasPrefix applies the HasPrefix predicate on the "youtube_id" field.
func YoutubeIDHasPrefix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDHasSuffix applies the HasSuffix predicate on the "youtube_id" field.
func YoutubeIDHasSuffix(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDIsNil applies the IsNil predicate on the "youtube_id" field.
func YoutubeIDIsNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYoutubeID)))
	})
}

// YoutubeIDNotNil applies the NotNil predicate on the "youtube_id" field.
func YoutubeIDNotNil() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYoutubeID)))
	})
}

// YoutubeIDEqualFold applies the EqualFold predicate on the "youtube_id" field.
func YoutubeIDEqualFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYoutubeID), v))
	})
}

// YoutubeIDContainsFold applies the ContainsFold predicate on the "youtube_id" field.
func YoutubeIDContainsFold(v string) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYoutubeID), v))
	})
}

// HasComments applies the HasEdge predicate on the "comments" edge.
func HasComments() predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentsWith applies the HasEdge predicate on the "comments" edge with a given conditions (other predicates).
func HasCommentsWith(preds ...predicate.Comments) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CommentsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CommentsTable, CommentsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Items) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Items) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Items) predicate.Items {
	return predicate.Items(func(s *sql.Selector) {
		p(s.Not())
	})
}
